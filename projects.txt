.. _projects-index:

Django プロジェクト
==============================

core において、Django プロジェクトは セッティングファイル以外のファイル以上のファイルを必要としません。このプラクティスにおいては、大体のプロジェクトが次のような事項から成っています。

* :ref:`projects-settings`
* :ref:`projects-urls`
* :ref:`projects-wsgi`
* :ref:`projects-applications`
* :ref:`projects-templates`
* :ref:`projects-media`
* manage.py
	
.. _projects-settings:
	
セッティング
----------------

settings モジュールは Django プロジェクトにおいて必須です。一般的に、 ``settings.py`` という名前で、あなたの作ったプロジェクトのルートに存在します。

.. _projects-settings-multiple:

複数環境でのセッティングの扱い
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Django での ``startproject`` コマンドは ``settings.py`` ファイルを 1 つ作成します。もしあなたが Django に触れて間もない場合、こつこつ学習する間はずっとこのファイルと一緒です。本番サイトのデプロイを始めたり、複数人で開発作業をする際に、複数のセッティングファイルをメンテナンスすることの恩恵を実感することでしょう。例えば、本番ではなく、ローカル環境で、よくある ``DEBUG`` 付きの実行をしたい場合などです。

複数セッティングを扱うにはいくつもの方法があります。次に挙げる要件に合わせて、好きな方法を選んでください。

* 全ての重要な **セッティングファイルは バージョン管理されている** 。 もし本番サイトでセッティングが変わったときは、あなたは誰が、いつ、その変更を加えたのかを知りたいと思うでしょう。
* **全てのセッティングが common base から継承されている** 。 もしあなたが ``django-debug-toolbar`` を ``INSTALLED_APPS`` に追加したいときは、全ての ``INSTALLED_APPS`` を再定義することなしに、それを行うべきです。

もしそういったことを考慮したくない場合は、シンプルに我々の Django プロジェクトテンプレートを、新しくプロジェクトを始めるときに使ってください。そのプロジェクトテンプレートでは、一歩踏み出すための複数プロジェクトをサポートする準備が整っています::

    django-admin.py startproject --template=https://github.com/lincolnloop/django-layout/tarball/master -e py,rst,example,gitignore my_project_name


.. seealso:: 

	`Django's Split Settings Wiki <http://code.djangoproject.com/wiki/SplitSettings>`_ 
		複数セッティングを扱う例があります

ファイルパスの扱い
^^^^^^^^^^^^^^^^^^^

あなたのセッティングの一つの機能は、 Django に静的メディアファイルやテンプレートを探す場所を知らせることです。おおよその場合は、それらは既にあなたのプロジェクトの中に存在して使用されています。もしそうであれば、あなたのために Python に絶対パスを生成させてください。こうすることで、異なる環境間でも、あなたのプロジェクトをポータブルに利用することができます。

.. code-block:: python
	
	import os
	DIRNAME = os.path.dirname(__file__)
	# ...
	STATIC_ROOT = os.path.join(DIRNAME, 'static')

.. _projects-urls:

URLconf
--------

デフォルトでは、あなたのプロジェクトのルートに URLconf を ``urls.py`` という名前で見つけることができるでしょう。これはリクエストがあなたのプロジェクトでどのようにルーティングされるかを定義しています。

シンプルに保つ
^^^^^^^^^^^^^^

あなたのプロジェクトの URLconf は、可能であればいつでも、あなたのアプリケーションから URLconf 群をシンプルにインクルードすべきです。そうしておけば、あなたが作ったアプリケーションロジックやプロジェクトを、ポインターとしてシンプルに提供できます。
Your project URLconf should simply include URLconfs from your applications whenever possible. This keeps your application logic inside your application and your project simply serves as a pointer to it.

.. seealso::

	`Django URL dispatcher documentation <http://docs.djangoproject.com/en/dev/topics/http/urls/#including-other-urlconfs>`_
		URLconf 群をインクルードする例
		
複数環境のための URLconf 群の扱い
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

あなたのセッティングモジュールのように、結局は、異なる URLconf 群にまたがって実行したい場面に出くわすことでしょう。あたなは多分、``admin`` をローカルで使いたいでしょうが、一度デプロイするだけでは終わらないでしょう。Django はこのための簡易な手段を既に提供しており、 `ROOT_URLCONF <http://docs.djangoproject.com/en/dev/ref/settings/#root-urlconf>`_ セッティングを一緒に使うことで実現できます。

これは基本的に、 :ref:`複数セッティング <projects-settings-multiple>` によるものと同じシナリオです。同じことをする、次のような解決法もあります::

	myproject
	  ...
	  settings/
		__init__.py
		base.py		<-- 全ての環境で共有される
		def.py
		production.py
	  urls/
	    __init__.py
		base.py			<-- 全ての環境で共有される
	    dev.py
	    production.py
	  ...
	
.. seealso:: 

	`我々の django-layout テンプレート <http://github.com/lincolnloop/django-layout>`_


.. _projects-wsgi:

WSGI ファイル
---------

WSGI ファイルは、あなたのプロジェクトを web で公開するために必要な情報を WSGI サーバーに教えます。Django のデフォルトの ``wsgi.py`` はおおよそのアプリケーションにとって十分な内容になっています。

.. _projects-applications:

ローカルアプリケーション
------------------

ローカルアプリケーションは、あなたのプロジェクトにドメイン固有な Django アプリケーションです。それらはおおよそ、プロジェクトモジュールの中に存在しており、あなたのプロジェクトに密に関係しており、その外側ではほとんど利用されないでしょう。

ローカル vs. サードパーティ
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

数百 [#f1]_ のオープンソース Django アプリケーションが利用可能です。車輪の再発明をする前に、既に他の誰かが、あなたが解決しようとしてる問題を解決していないか、 Google または `Django Packages <http://djangopackages.com>`_ で検索し、確認しましょう。 もし解決してくれそうなものを見つけたら、 あなたのプロジェクトコードに書き入れる **のではなく** 、代わりに、あなたの環境の :ref:`pip requirements <deployment-bootstrap-packaging>` に追加しましょう。

.. _tip: もし *大体は* 動くけど、もうすこし仕上げが必要なものを見つけたら、そのプロジェクトのオーナーがプルできるようにパブリックなフォークを作り、そのプロジェクトに技術還元するような、良いオープンソース市民になることも検討してみると良いでしょう。

.. [#f1] http://djangopackages.com/categories/apps/


名前空間
^^^^^^^^^^^^^

ローカルアプリケーションがどのようにあなたのプロジェクトに取り込まれるべきかは、 Django コミュニティ [#f2]_ で継続的に議論されています。幸い Django 1.4 のリリースで、デフォルトの ``manage.py`` は今後はもう ``PYTHONPATH`` [#f3]_ を変更しないので、問題が少なくなりました。

Lincoln Loop においては、我々はプロジェクトの名前空間内にプロジェクトアプリケーションを入れます。これにより、グローバルの名前空間の汚染を防ぎ、名前が衝突する潜在性を回避します。

.. [#f2] `django-developers メーリングリストでの、チュートリアルにおける、プロジェクトの名前空間についての議論 <http://groups.google.com/group/django-developers/browse_thread/thread/9d7aaae08d6cd75d/007ba460a0852e19>`_
.. [#f3] `Django 1.4 での manage.py の変更点 <https://docs.djangoproject.com/en/1.4/releases/1.4/#updated-default-project-layout-and-manage-py>`_

.. _projects-templates:

テンプレート
------------------

場所
^^^^^^^^

テンプレートはおおよそ、2 つの場所、アプリケーションか、プロジェクトのルート階層のうち、どちらかに存在します。我々のおすすめは、あなたが複数のプロジェクトを自分のアプリケーションに含めない限り(または "再利用可能な" オープンソースのアプリケーションとして開発しない限り)、全てのあなたのテンプレートを、プロジェクトのテンプレートディレクトリに保持することです。その場合、アプリケーション中のサンプルテンプレートのセットを含めて公開するのに有用で、その状態のままで動かすこともできますし、他の開発者へのサンプルとして提供することもできます。

名前付け
^^^^^^^^^^^^

Django のジェネリックビューはテンプレートに名前付けするための優れたパターンを提供します。Django に既にあるデザインパターンに従うことは、次の 2 つの理由で有用です。 

1. それらは、よく考え抜かれていますし、よくテストもされています
2. あなたの Django コードを使う新しい開発者にとって、コードを読みやすくします。

大体のジェネリックビューテンプレートは次の形式で名前付けされます::

	[application]/[model]_[function].html
	
例えば、自分の連絡帳 (``address_book`` application) にある全ての連絡先 (``Contact`` model) を表示するリストのテンプレートを作成する際、私は次のテンプレートを使います::

	address_book/contact_list.html
	
同じようなものとして、連絡先の詳細ビューでは次のものを使います::

	address_book/contact_detail.html
	
Not every template you create will map so closely to a single model, however. In those cases, you're on your own for naming, but should still keep your templates in a directory with the same name as your application.

When using inclusion tags or other other functionality to render partial templates, keep them in an ``includes`` directory inside the application template directory. For example, if I had an inclusion tag to render a contact form inside my address book application, I would create a template for it at::

	address_book/includes/contact_form.html
	
There is no rule (anymore) that templates must have an ``html`` file extension. If you are rendering something else (plain text, JSON, XML, etc), your templates file extension should match that of the content you are generating.

.. _projects-media:

Static Media
------------

Static media encompasses all the non-dynamic content needed for your website: CSS, images, JavaScript, Flash, etc. It comes in two flavors, user-generated content and the media needed to render your site. Best practice dictates that *your* static media lives inside your project and your version control system. Certainly, we don't want stuff our users' uploads to go to the same place. As such, we always use ``django.contrib.staticfiles`` [#django.contrib.staticfiles]_.

In addition to some other slick features, ``staticfiles`` gives you a ``static`` template tag [#static]_ that will properly locate your static files whether they are on your local computer or in a non-local storage on your production system. This leaves ``MEDIA_URL`` and ``MEDIA_ROOT`` to manage user generated content.

.. seealso::

	`On Static Media and Django <http://lincolnloop.com/blog/2008/nov/13/static-media-and-django/>`_

.. [#django.contrib.staticfiles] https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/
.. [#static] https://docs.djangoproject.com/en/dev/ref/contrib/staticfiles/#std:templatetag-staticfiles-static
