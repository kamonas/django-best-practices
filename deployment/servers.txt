.. _deployment-servers:

サーバー
==============

.. note:: デプロイの考え方 (アーキテクチャー) は何が必要かとサイトのトラフィックに広く依存します。下記のセットアップについての記述は、最低限の設定であり、大体のインスタンスではうまく動きます。

我々は、フロントエンドプロキシ `Nginx <http://nginx.net>`__ の裏で `gunicorn <http://www.gunicorn.org>`__ または `uWSGI <http://projects.unbit.it/uwsgi>`__ を経由して、PostgreSQL データベースバックエンドと一緒に Ubuntu Linux 上で Django を動かします。便宜上、ここでは Gunicorn/Nginx のみ取り扱います。

.. index:: Nginx

Nginx
-----

`Nginx <http://nginx.net>`__ はそのスピード、安定性、少ないリソース・フットプリントから優秀なフロントエンドサーバーを形成します。サイトのためのよくある Nginx の設定は次のようになります:

.. literalinclude:: /examples/nginx.conf
    :language: nginx
    
.. rubric:: それは何をしますか ?

最初のブロックは Nginx に我々の Django サイトをホスティングするサーバーをどこに探せば良いか知らせます。二番目のブロックは ``www.domain.com`` に来るどんなリクエストも ``domain.com`` にリダイレクトさせます。従って、各リソースは、canonical URL をただ1つ持つことになります。最後のセクションは、全ての処理についてのものです。この記述は、 ``/var/www/domain`` 内のファイルにリクエストがマッチするかを Nginx にチェックさせます。もしマッチすれば、ファイルが送出され、もしマッチしなければ、 Django サイトへリクエストを中継します。

.. index:: 
    pair: Nginx; SSL

SSL
^^^

フロントエンドサーバーを走らせる、その他の恩恵としては、SSL のターミネーションです。 SSL アクセスと 非 SSL アクセスで走らせる Django インスタンスを 2 つ持つよりも、 ``localhost`` 上でリッスンしている単一の非 SSL の WSGI インスタンスに、全てのリクエストをリダイレクトして返すゲートキーパーとして振る舞う Nginx を選択します。ここにどのようなものになるかを記載します:

.. literalinclude:: /examples/nginx_ssl.conf
    :language: nginx
    
非 SSL 設定ファイルの末尾に、このコードを入れることもできます。

.. index:: Gunicorn

Gunicorn
--------

Gunicorn は軽量 WSGI サーバーです。これは高トラフィックスサイト用にも小さなデプロイからスケールすることができます。 ``pip install gunicorn`` からインストールできます。 Nginx は HTTP(S) でリッスンするので、 Gunicorn には違うポートをバインドする必要があるでしょう。 その状態でなら、あなたは ``localhost`` への応答だけを教えてあげるだけです。単純な gunicorn プロセスは次のようになります:

.. sourcecode:: bash

    $ gunicorn --workers=4 --bind=127.0.0.1:9000 my_project.wsgi:application

これは gunicorn のプロセスを、 http://127.0.0.1:9000 でリッスンする 4 つの worker で生成します。 もしあなたのプロジェクトにまだ ``wsgi.py`` ファイルがなければ、そのファイルを加えたいと思うでしょう。 `the Django WSGI docs <https://docs.djangoproject.com/en/dev/howto/deployment/wsgi/#the-application-object>`__ または `django-layout <https://github.com/lincolnloop/django-layout/blob/master/project_name/wsgi.py>`__ を例として参照してください。

プロセス・マネジメント
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

あなたは gunicorn が常に走っていて、サーバーの再起動時にも自動的に立ち上がることを確かなものにしたいでしょう。 もし Ubuntu にデプロイするなら、 ``upstart`` はおそらく、その最初として最も簡単な方法です。ここにサンプルの設定を記載します:

.. literalinclude:: /examples/upstart.conf
    :language: bash

これをファイルとして ``/etc/init/gunicorn.conf`` に保存し ``sudo start gunicorn`` を実行してください。 トラブルシューティングのために、 あなたのログは ``/var/log/upstart/gunicorn.log`` で見れるようになっていると思います。

.. note:: `スーパーバイザー <http://supervisord.org/>`__ は、 Python のみで書かれていて、もしあなたが ``upstart`` にアクセスできない場合の選択肢です。
